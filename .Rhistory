choices = as.character(unique(values$specData$experiment)))
})
#Unit include dynamic checkboxes
output$unitInclude <- renderUI({
d <- subset(values$specData, experiment == input$experiment)
unitsIn <- as.character(unique(d$unit_ID))
checkboxGroupInput("units", "Include Units", unitsIn, selected = unitsIn)
})
#ID1 include dynamic checkboxes
output$ID1include <- renderUI({
d <- subset(values$specData, experiment == input$experiment)
id1 <- as.character(unique(d$id_1))
checkboxGroupInput("id1", "Include ID_1", id1, selected = id1)
})
#ID2 include dynamic checkboxes
output$ID2include <- renderUI({
d <- subset(values$specData, experiment == input$experiment)
id2 <- as.character(unique(d$id_2))
checkboxGroupInput("id2", "Include ID_2", id2, selected = id2)
})
#ID3 include dynamic checkboxes
output$ID3include <- renderUI({
d <- subset(values$specData, experiment == input$experiment)
id3 <- as.character(unique(d$id_3))
checkboxGroupInput("id3", "Include ID_3", id3, selected = id3)
})
#Treatment include dynamic checkboxes
output$treatInclude <- renderUI({
d <- subset(values$specData, experiment == input$experiment)
treat <- as.character(unique(d$treatName))
checkboxGroupInput("treat", "Include Treatment", treat, selected = treat)
})
### render plot ----
output$plot <- renderPlot({
d <- values$specData
d <- subset(d, experiment == input$experiment)
if(!is.null(input$units)){
d <- subset(d, unit_ID %in% input$units)
}
if(!is.null(input$id1) & !(all(input$id1 == ""))){
d <- subset(d, id_1 %in% input$id1)
}
if(!is.null(input$id2) & !(all(input$id2 == ""))){
d <- subset(d, (id_2 %in% input$id2) | is.na(id_2))
}
if(!is.null(input$id3) & !(all(input$id3 == ""))){
d <- subset(d, (id_3 %in% input$id3) | is.na(id_3))
}
if(!is.null(input$treat) & !(all(input$treat == ""))){
d <- subset(d, (treatName %in% input$treat) | is.na(treatName))
}
d$colourBy <- "All_Data"
colourByList <- input$colourBy
if(colourByList == "None" ){
d$colourBy <- "All_Data"
}
if(colourByList == "Unit" ){
d$colourBy <- factor(d$unit_ID)
}
if(colourByList == "ID_1" ){
d$colourBy <- factor(d$id_1)
}
if(colourByList == "ID_2" ){
d$colourBy <- factor(d$id_2)
}
if(colourByList == "ID_3" ){
d$colourBy <- factor(d$id_3)
}
if(colourByList == "Treatment" ){
d$colourBy <- factor(d$treatName)
}
if(("Unit" %in% colourByList) && ("ID_1" %in% colourByList)){
d$colourBy <- factor(paste(d$unit_ID, d$id_1, sep = "_"))
}
if(("Unit" %in% colourByList) && ("ID_2" %in% colourByList)){
d$colourBy <- factor(paste(d$unit_ID, d$id_2, sep = "_"))
}
if(("Unit" %in% colourByList) && ("Treatment" %in% colourByList)){
d$colourBy <- factor(paste(d$unit_ID, d$treatName, sep = "_"))
}
if(("Unit" %in% colourByList) && ("ID_1" %in% colourByList) &&
("ID_2" %in% colourByList)){
d$colourBy <- factor(paste(d$unit_ID, d$id_1, d$id_2, sep = "_"))
}
if(("ID_1" %in% colourByList) && ("Treatment" %in% colourByList)){
d$colourBy <- factor(paste(d$id_1, d$treatName, sep = "_"))
}
if(("ID_3" %in% colourByList) && ("Treatment" %in% colourByList)){
d$colourBy <- factor(paste(d$id_3, d$treatName, sep = "_"))
}
d$facetBy <- ""
facetByList <- input$facetBy
if(facetByList == "Unit" ){
d$facetBy <- factor(d$unit_ID)
}
if(facetByList == "ID_1" ){
d$facetBy <- factor(d$id_1)
}
if(facetByList == "ID_2" ){
d$facetBy <- factor(d$id_2)
}
if(facetByList == "ID_3" ){
d$facetBy <- factor(d$id_3)
}
if(facetByList == "Treatment" ){
d$facetBy <- factor(d$treatName)
}
#limit y axis
yLimits <- c(min(d$pHinsitu), max(d$pHinsitu))
if(input$yRangeCheckbox){
yLimits <- c(input$ySlider[1], input$ySlider[2])
}
#limit dates
startGraphDateTime <- as.Date(input$dates[1])
endGraphDateTime <- as.Date(input$dates[2])
#add a day to make sure it gets all the way to midnight
#endGraphDateTime <- endGraphDateTime + 1
d <- subset(d, date >= startGraphDateTime & date < endGraphDateTime)
gType <- input$graphType
if(gType == "Time Series"){
p <- ggplot(d, aes_string("date", "pHinsitu")) +
geom_point(aes(colour = colourBy), size = input$point_size) +
ylim(yLimits) +
ylab("pH at exp. temperature") +
xlab("Date") +
theme_bw(base_size = 24)
if(facetByList != "None"){
p <- p + facet_wrap( ~ facetBy, ncol = 2)
}
return(p)
}
if(gType == "Boxplot"){
p <- ggplot(d, aes_string("colourBy", "pHinsitu")) +
geom_boxplot() +
geom_jitter(colour = "blue", size = input$point_size) +
ylim(yLimits) +
ylab("pH at exp. temperature") +
xlab("Group") +
theme_bw(base_size = 24) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
if(facetByList != "None"){
p <- p + facet_wrap( ~ facetBy, ncol = 2)
}
return(p)
}
})
## downlaod csv ----
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste("SpecData", ".csv", sep = "")
},
content = function(file) {
write.csv(values$specData, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
library(datarium)
library(dplyr)
library(reshape2)
library(ggpmisc)
library(splus2R)
library(bestNormalize)
library(tidyverse)
library(ggpubr)
### add some intro material here ###
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
library(datarium)
library(dplyr)
library(reshape2)
library(ggpmisc)
library(splus2R)
library(bestNormalize)
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
library(dplyr)
library(bestNormalize)
library(nlme)
library(agricolae)
library(multcomp)
setwd("~/Git/Clam-OA-project")
data <-read.csv("clam_full_data.csv")
colnames(data)[1] <- gsub('^...','',colnames(data)[1])
data$ts <- substring(data$If,1,3)
data$ts <- factor(data$ts,
levels = c("L-C", "L-T", "M-C", "M-T"))
data$treatment <- recode_factor(data$treatment, C = "Ambient", T = "OA")
my_comparisons <- list( c("L-C", "L-T"), c("M-C", "M-T"), c("L-C", "M-C"), c("L-T", "M-T") )
data$length <- as.numeric(data$length)
data$width <- as.numeric(data$width)
data$depth <- as.numeric(data$depth)
data$volume <- ((data$length/2) * (data$width/2) * (data$depth/2)/1000) * (4/3) * pi
data$mass <-  ifelse(data$species == "littleneck",
(data$volume * 0.0518) - 0.0229,
(data$volume * 0.0617) - 0.0288)
data$umol.O2.normal <- data$umol.O2/data$mass
data$species <- factor(data$species, levels = c("manila","littleneck"))
data$sex <- factor(data$sex, levels = c("f","m"))
data$spawned <- factor(data$spawned, levels = c("n","y"))
data$stage <- factor(data$stage, levels = c("5","4","3"))
test_resp <- data$umol.O2.normal
qqnorm(test_resp, main = "Q-Q Plot: untransformed") # check linearity
qqline(test_resp)
norm_test <- shapiro.test(test_resp) # p-value > 0.05 = good, don't need transformation
print(paste("shapiro test p-value, untransformed:", norm_test$p.value))
if(norm_test$p.value<0.05)     {
normalized <- bestNormalize(test_resp, main = "Q-Q Plot: transformed")
test_resp <- normalized$x.t # overwrite
qqnorm(test_resp) # check linearity of transformed response
qqline(test_resp)
norm_test <- shapiro.test(test_resp) # p-value > 0.05 = good
print(paste("shapiro test p-value, transformed:", norm_test$p.value))}
data$response <- test_resp # overwrite
my_test <- aov(response ~ sex * stage * treatment, data = data)
my_test_summary <- summary(my_test)
summary(my_test)
# Compare model AIC scores (lowest score wins)
other <- aov(response ~ species * sex * spawned, data = data)
other2 <- aov(response ~ spawned * treatment, data = data)
model.set <- list(my_test, other, other2)
model.names <- c("sex:stage:treatment", "species:sex:spawned","spawned:treatment")
aictab(model.set, modnames = model.names)
aicctab(model.set, modnames = model.names)
library(AICcmodavg)
install.packages("AICcmodavg")
library(AICcmodavg)
aictab(model.set, modnames = model.names)
my_test <- aov(response ~ sex * stage * treatment * spawned * species, data = data)
my_test_summary <- summary(my_test)
summary(my_test)
my_test <- aov(response ~ species * treatment * sex * spawned * stage, data = data)
my_test_summary <- summary(my_test)
summary(my_test)
other3 <- aov(response ~ species * spawned, data = data)
other4 <- aov(response ~ treatment * spawned, data = data)
other5 <- aov(response ~ treatment * sex * stage, data = data)
other6 <- aov(response ~ species * treatment * sex * stage, data = data)
model.set <- list(my_test, other, other2, other3, other4, other5, other6)
model.names <- c("species:treatment:sex:spawned:stage", "species:sex:stage","species:spawned:treatment",
"species:spawned","treatment:spawned","treatment:sex:stage","species:treatment:sex:stage")
aictab(model.set, modnames = model.names)
other2_summary <- summary(other2)
summary(other2)
other2 <- aov(response ~ species * treatment * spawned, data = data)
other3 <- aov(response ~ species * spawned, data = data)
other4 <- aov(response ~ treatment * spawned, data = data)
other5 <- aov(response ~ treatment * sex * stage, data = data)
other6 <- aov(response ~ species * treatment * sex * stage, data = data)
model.set <- list(my_test, other, other2, other3, other4, other5, other6)
model.names <- c("species:treatment:sex:spawned:stage", "species:sex:stage","species:spawned:treatment",
"species:spawned","treatment:spawned","treatment:sex:stage","species:treatment:sex:stage")
aictab(model.set, modnames = model.names)
other2_summary <- summary(other2)
summary(other2)
other4_summary <- summary(other4)
summary(other2)
other4_summary <- summary(other4)
summary(other4)
test_atp <- data$ATPase
qqnorm(test_atp, main = "Q-Q Plot: untransformed") # check linearity
qqline(test_atp)
norm_test_atp <- shapiro.test(test_atp) # p-value > 0.05 = good, don't need transformation
print(paste("shapiro test p-value, untransformed:", norm_test_atp$p.value))
my_test_atp <- aov(ATPase ~ species * treatment * sex * spawned * stage, data = data)
my_test_atp_summary <- summary(my_test_atp)
summary(my_test)
summary(my_test_atp)
my_test_atp <- aov(ATPase ~ species * treatment * sex * spawned, data = data)
my_test_atp_summary <- summary(my_test_atp)
summary(my_test_atp)
my_test_atp <- aov(ATPase ~ species * treatment * sex * spawned * stage, data = data)
my_test_atp_summary <- summary(my_test_atp)
summary(my_test_atp)
# Compare model AIC scores (lowest score wins)
other <- aov(ATPase ~ sex * stage, data = data)
other2 <- aov(ATPase ~ treatment * spawned * stage, data = data)
other3 <- aov(ATPase ~ species * spawned * stage, data = data)
other4 <- aov(ATPase ~ sex * spawned * stage)
model.set <- list(my_test_atp, other, other2, other3, other4)
model.names <- c("species:treatment:sex:spawned:stage", "sex:stage",
"stage:spawned:treatment","species:spawned:stage","sex:spawned")
aictab(model.set, modnames = model.names)
summary(my_test_atp)
# Compare model AIC scores (lowest score wins)
other <- aov(ATPase ~ sex * stage, data = data)
other2 <- aov(ATPase ~ treatment * spawned * stage, data = data)
other3 <- aov(ATPase ~ species * spawned * stage, data = data)
other4 <- aov(ATPase ~ sex * spawned * stage)
model.set <- list(my_test_atp, other, other2, other3, other4)
other3 <- aov(ATPase ~ species * spawned * stage, data = data)
other4 <- aov(ATPase ~ sex * spawned * stage)
other4 <- aov(ATPase ~ sex * spawned * stage, data = data)
model.set <- list(my_test_atp, other, other2, other3, other4)
model.names <- c("species:treatment:sex:spawned:stage", "sex:stage",
"stage:spawned:treatment","species:spawned:stage","sex:spawned")
aictab(model.set, modnames = model.names)
model.names <- c("species:treatment:sex:spawned:stage", "sex:stage",
"stage:spawned:treatment","species:spawned:stage","sex:spawned:stage")
aictab(model.set, modnames = model.names)
other_summary <- summary(other)
summary(other)
other2_summary <- summary(other2)
summary(other2)
other3_summary <- summary(other3)
summary(other3)
other4_summary <- summary(other4)
summary(other4)
chisq.test(treatment, spawned)
chisq.test(data$treatment, data$spawned)
chisq.test(data$treatment, data$stage)
# Calculate the chi-squared statistic and p-value for the test
data$sp_sex <- paste(data$species,data$sex)
manila_f <- subset(data, sp_sex == "manila f")
chisq.test(manila_f$treatment, manila_f$stage)
chisq.test(manila_m$treatment, manila_m$stage)
manila_m <- subset(data, sp_sex == "manila m")
littleneck_f <- subset(data, sp_sex == "littleneck_f")
littleneck_m <- subset(data, sp_sex == "littleneck_m")
chisq.test(manila_f$treatment, manila_f$stage)
chisq.test(manila_m$treatment, manila_m$stage)
chisq.test(littleneck_f$treatment, littleneck_f$stage)
littleneck_f <- subset(data, sp_sex == "littleneck f")
littleneck_m <- subset(data, sp_sex == "littleneck m")
chisq.test(littleneck_f$treatment, littleneck_f$stage)
chisq.test(littleneck_m$treatment, littleneck_m$stage)
data <-read.csv("clam_full_data.csv")
colnames(data)[1] <- gsub('^...','',colnames(data)[1])
data$treatment <- recode_factor(data$treatment, C = "Ambient", T = "OA")
data$species <- factor(data$species, levels = c("manila","littleneck"))
data$sex <- factor(data$sex, levels = c("f","m"))
data$spawned <- factor(data$spawned, levels = c("n","y"))
data$stage <- factor(data$stage, levels = c("5","4","3"))
data$mort <- factor(data$mort, levels = c("n","y"))
chisq.test(manila_f$treatment, manila_f$spawned)
chisq.test(manila_m$treatment, manila_m$spawned)
chisq.test(littleneck_f$treatment, littleneck_f$spawned)
chisq.test(littleneck_m$treatment, littleneck_m$spawned)
chisq.test(manila_f$treatment, manila_f$mort)
chisq.test(manila_m$treatment, manila_m$mort)
chisq.test(littleneck_f$treatment, littleneck_f$mort)
chisq.test(littleneck_m$treatment, littleneck_m$mort)
chisq.test(manila_f$stage, manila_f$spawned)
chisq.test(manila_m$stage, manila_m$spawned)
chisq.test(littleneck_f$stage, littleneck_f$spawned)
chisq.test(littleneck_m$stage, littleneck_m$spawned)
table(data$spawned)
table(data$sp_sex, data$spawned)
table(row = data$sp_sex, column = data$spawned)
# Calculate the chi-squared statistic and p-value for the test
data$sp_sex <- paste(data$species,data$sex)
table(row = data$sp_sex, column = data$spawned)
table <- table(row = data$sp_sex, column = data$spawned)
print(table)
# fourth method:
manila_f %$%
ctable(treatment, spawned,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
library(summarytools)
install.packages("summarytools")
library(summarytools)
# fourth method:
manila_f %$%
ctable(treatment, spawned,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
# fourth method:
manila_f %$%
ctable(treatment, spawned,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
html(<div class="container st-container">
<table class="table table-bordered st-table st-table-bordered st-cross-table ">
<thead>
<tr>
<th></th>
<th colspan="8" align="center" class="st-protect-top-border">spawned</th>
<th colspan="4"></th>
</tr>
<tr>
<td align="center">
<strong>treatment</strong>
</td>
<th colspan="4" align="center">n</th>
<th colspan="4" align="center">y</th>
<th colspan="4" align="center">Total</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<strong align="center">Ambient</strong>
</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">15</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">75.0%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">5</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">25.0%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">20</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">100.0%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
</tr>
<tr>
<td>
<strong align="center">OA</strong>
</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">21</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">95.5%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">1</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">4.5%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">22</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">100.0%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
</tr>
<tr>
<td>
<strong align="center">Total</strong>
</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">36</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">85.7%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">6</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">14.3%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
<td align="right" style="padding:0 0 0 15px;border-right:0;text-align:right">42</td>
<td align="left" style="padding:0 1px 0 4px;border-left:0;border-right:0;text-align:left">(</td>
<td align="left" style="padding:0;border-left:0;border-right:0;text-align:right">100.0%</td>
<td align="left" style="padding:0 15px 0 1px;border-left:0;text-align:right">)</td>
</tr>
</tbody>
<tfoot>
<tr>
<td colspan="100"><em><strong>&nbsp;&#935;<sup>2</sup></strong> = 2.1040&nbsp;&nbsp;&nbsp;<strong>df</strong> = 1&nbsp;&nbsp;&nbsp;<strong>p</strong> = .1469</em><br/></td>
</tr>
</tfoot>
</table>
</div>)
table1 <- manila_f %$%
ctable(treatment, spawned,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
manila_f %$%
ctable(treatment, spawned,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
manila_f %$%
ctable(treatment, spawned,
prop = "r", chisq = TRUE, headings = FALSE
) %>%
print(
method = "render",
style = "rmarkdown",
footnote = NA
)
detach("package:htmltools", unload=TRUE)
